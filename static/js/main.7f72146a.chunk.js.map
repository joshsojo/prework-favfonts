{"version":3,"sources":["components/font-text/font-text.component.jsx","components/font-card/font-card.component.jsx","pages/homepage/homepage.component.jsx","serviceWorker.js","index.js"],"names":["FontText","styled","p","props","link","font","category","size","FontCard","family","text","cardMd","cardLg","cardXl","xs","sm","md","lg","xl","className","type","HomePage","handleSubmit","event","preventDefault","reloadPage","setState","searchFontsField","inputWordField","fontSize","darkModeToggle","grideViewToggle","document","body","classList","remove","toggleGrid","state","toggleDarkMode","add","handleChange","a","target","name","value","length","fontsArray","isLoading","loadTotal","loadLimit","this","fetch","then","response","json","result","items","error","console","log","alert","filteredFontArray","filter","toLowerCase","includes","filteredTotal","onSubmit","style","borderRadius","border","padding","borderRight","autoComplete","onChange","placeholder","defaultValue","onClick","gutter","item","idx","map","index","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f72146a.chunk.js","sourcesContent":["import styled from \"styled-components\";\nconst FontText = styled.p`\n  @import url('${props => props.link}');\n  font-family: '${props => props.font || \"Open Sans\"}', ${props =>\n  props.category || \"sans-serif\"};\n  font-size: ${props => props.size || 32}px;\n  line-height: 1.1;\n   display: block;\n  display: -webkit-box;\n      height: 141px;\n      -webkit-line-clamp: 4;\n      -webkit-box-orient: vertical;\n      overflow: hidden;\n      text-overflow: ellipsis;\n`;\nexport default FontText;\n","import React from \"react\";\n\nimport { Col, Icon } from \"antd\";\nimport FontText from \"../font-text/font-text.component\";\nimport \"antd/dist/antd.css\";\nimport \"./font-card.styles.scss\";\n\nconst FontCard = ({ family, category, size, text, cardMd, cardLg, cardXl }) => (\n  <Col xs={24} sm={24} md={cardMd} lg={cardLg} xl={cardXl}>\n    <div className=\"font-card\">\n      <h3>{family}</h3>\n      <span className=\"font-card__add-icon\">\n        <Icon type=\"plus-circle\" />\n      </span>\n      <h4>{category}</h4>\n      <FontText\n        font={family}\n        category={category}\n        size={size}\n        link={`https://fonts.googleapis.com/css?family=${\n          family ? family : \"Open Sans\"\n        }&display=swap`}\n      >\n        {text}\n      </FontText>\n    </div>\n  </Col>\n);\n\nexport default FontCard;\n","import React from \"react\";\n\nimport { Row, Col, Icon, Spin } from \"antd\";\nimport FontCard from \"../../components/font-card/font-card.component\";\n\nimport \"antd/dist/antd.css\";\nimport \"./homepage.styles.scss\";\n\nclass HomePage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      searchFontsField: \"\",\n      inputWordField: \"Then came the night of the first falling start.\",\n      fontSize: \"32\",\n      darkModeToggle: false,\n      grideViewToggle: false,\n      fontsArray: [],\n      isLoading: false,\n      loadTotal: 52,\n      loadLimit: 52,\n      cardMd: 6,\n      cardLg: 6,\n      cardXl: 6\n    };\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n  };\n\n  reloadPage = () => {\n    this.setState({\n      searchFontsField: \"\",\n      inputWordField: \"Then came the night of the first falling start.\",\n      fontSize: \"32\",\n      darkModeToggle: false,\n      grideViewToggle: false,\n      cardMd: 6,\n      cardLg: 6,\n      cardXl: 6\n    });\n    document.body.classList.remove(\"container-dark\");\n  };\n\n  toggleGrid = () => {\n    const { grideViewToggle } = this.state;\n    if (grideViewToggle) {\n      this.setState({\n        cardMd: 6,\n        cardLg: 6,\n        cardXl: 6,\n        grideViewToggle: !grideViewToggle\n      });\n    } else if (!grideViewToggle) {\n      this.setState({\n        cardMd: 24,\n        cardLg: 24,\n        cardXl: 24,\n        grideViewToggle: !grideViewToggle\n      });\n    }\n  };\n\n  toggleDarkMode = () => {\n    const { darkModeToggle } = this.state;\n    if (!darkModeToggle) {\n      document.body.classList.add(\"container-dark\");\n    } else {\n      document.body.classList.remove(\"container-dark\");\n    }\n    this.setState({ darkModeToggle: !darkModeToggle });\n  };\n\n  handleChange = async event => {\n    const { name, value } = await event.target;\n    await this.setState({\n      [name]: value\n    });\n    if (this.state.inputWordField.length === 0)\n      await this.setState({\n        inputWordField: \"Then came the night of the first falling start.\"\n      });\n  };\n\n  componentDidMount() {\n    try {\n      this.setState({ isLoading: true });\n      fetch(\n        `https://www.googleapis.com/webfonts/v1/webfonts?sort=popularity&key=AIzaSyB4bp5OGaQ1rbXUhJhn5b78kgAO0f5z3Wo`\n      )\n        .then(response => response.json())\n        .then(result =>\n          this.setState({\n            fontsArray: result.items,\n            isLoading: false,\n            loadTotal: result.items.length\n          })\n        );\n    } catch (error) {\n      console.log(\"Error: \", error);\n      alert(\"An error occurred, Please try again\");\n    }\n  }\n  render() {\n    const {\n      darkModeToggle,\n      grideViewToggle,\n      fontsArray,\n      fontSize,\n      inputWordField,\n      searchFontsField,\n      loadTotal,\n      loadLimit,\n      isLoading,\n      cardMd,\n      cardLg,\n      cardXl\n    } = this.state;\n    const filteredFontArray = fontsArray.filter(font =>\n      font.family.toLowerCase().includes(searchFontsField.toLowerCase())\n    );\n    const filteredTotal = filteredFontArray.length;\n    return (\n      <div className=\"home-page\">\n        <div className=\"input-function\">\n          <form className=\"input-form\" onSubmit={this.handleSubmit}>\n            <Row\n              style={{\n                borderRadius: \"3rem\",\n                border: \"1px solid #868686\",\n                padding: \"0.4rem 2rem\"\n              }}\n            >\n              <Col\n                xs={21}\n                sm={9}\n                md={8}\n                lg={8}\n                xl={8}\n                style={{\n                  borderRight: \"1px solid #868686\"\n                }}\n              >\n                <input\n                  autoComplete=\"off\"\n                  onChange={this.handleChange}\n                  className=\"input-row__input\"\n                  name=\"searchFontsField\"\n                  type=\"search\"\n                  placeholder=\"Search fonts\"\n                />\n              </Col>\n              <Col\n                xs={0}\n                sm={9}\n                md={9}\n                lg={9}\n                xl={9}\n                style={{\n                  borderRight: \"1px solid #868686\"\n                }}\n                className=\"input-row__col__type\"\n              >\n                <input\n                  autoComplete=\"off\"\n                  onChange={this.handleChange}\n                  className=\"input-row__input\"\n                  name=\"inputWordField\"\n                  type=\"search\"\n                  placeholder=\"Type Something\"\n                />\n              </Col>\n              <Col\n                xs={0}\n                sm={3}\n                md={3}\n                lg={3}\n                xl={3}\n                className=\"input-row__col__font\"\n              >\n                <select\n                  defaultValue=\"32\"\n                  onChange={this.handleChange}\n                  name=\"fontSize\"\n                  className=\"input-row__select select-font\"\n                >\n                  <option value=\"20\">20px</option>\n                  <option value=\"24\">24px</option>\n                  <option value=\"32\">32px</option>\n                  <option value=\"40\">40px</option>\n                </select>\n              </Col>\n              <Col\n                xs={2}\n                sm={2}\n                md={2}\n                lg={2}\n                xl={2}\n                onClick={() => this.toggleDarkMode()}\n                className=\"input-row__col__toggle-dark\"\n              >\n                {!darkModeToggle ? (\n                  <button className=\"mode-toggle mode-toggle__dark\"></button>\n                ) : (\n                  <button className=\"mode-toggle mode-toggle__white\"></button>\n                )}\n              </Col>\n              <Col\n                xs={0}\n                sm={0}\n                md={1}\n                lg={1}\n                xl={1}\n                onClick={() => this.toggleGrid()}\n                className=\"input-row__col__toggle-grid\"\n              >\n                {grideViewToggle ? (\n                  <Icon className=\"input-row__icon\" type=\"table\" />\n                ) : (\n                  <Icon className=\"input-row__icon\" type=\"unordered-list\" />\n                )}\n              </Col>\n              <Col xs={1} sm={1} md={1} lg={1} xl={1}>\n                <button className=\"reset-button\" type=\"reset\">\n                  <Icon\n                    onClick={() => this.reloadPage()}\n                    className=\"input-row__icon\"\n                    type=\"reload\"\n                  />\n                </button>\n              </Col>\n            </Row>\n          </form>\n        </div>\n        {/* END OF INPUT FUNCTION */}\n        {/* BEGINNING OF MAIN SECTION */}\n        <section className=\"main-section\">\n          <p className=\"main-section__viewing-total\">\n            Viewing <span>{filteredTotal}</span> of <span>{loadTotal}</span>{\" \"}\n            font families\n          </p>\n          <Row gutter={[16, 16]}>\n            {!isLoading ? (\n              filteredFontArray\n                .filter((item, idx) => idx < loadLimit)\n                .map((font, index) => (\n                  <FontCard\n                    key={index}\n                    family={font.family}\n                    category={font.category}\n                    size={fontSize}\n                    text={inputWordField}\n                    cardMd={cardMd}\n                    cardLg={cardLg}\n                    cardXl={cardXl}\n                  />\n                ))\n            ) : (\n              <Spin />\n            )}\n            {loadLimit >= filteredTotal ? null : (\n              <button\n                className=\"load-more\"\n                onClick={() => this.setState({ loadLimit: loadLimit + 52 })}\n              >\n                <p className=\"load-more__text\">load more</p>\n                <Icon type=\"down\" className=\"down-arrow\" />\n              </button>\n            )}\n          </Row>\n        </section>\n        <footer className=\"footer\">\n          <p>Made by Josh | 2019 | Chingu Pre-Work Project</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<HomePage />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}